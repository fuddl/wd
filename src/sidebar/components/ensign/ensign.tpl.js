import { getTokens } from "../../wd-get-token.js";
import { requreStylesheet } from '../require-styleheet.js'


const lang = navigator.language.substr(0,2);

const ensign = (vars) => {
	requreStylesheet('components/ensign/ensign.css')
	let header = document.createElement('header');
	let title = document.createElement('h1');
	let id = document.createElement('small');
	let space = document.createTextNode(' ');
	let description = document.createElement('p');

	header.classList.add('ensign');

	title.classList.add('ensign__title');
	if (typeof vars.label === 'string') {
		title.innerText = vars.label;
	} else if (vars.label instanceof Node) {
		title.appendChild(vars.label);
	}

	id.classList.add('ensign__id');
	let link = document.createElement('a');
	link.classList.add("ensign__id__link");

	let namespace = '';
	if (!vars.id.startsWith('Q')) {
		switch (vars.id.charAt(0)) {
			case 'L':
				namespace = 'Lexeme:';
				break;
		}
	}

	const eUrl =  `https://www.wikidata.org/wiki/${namespace}${vars.id}`
	link.setAttribute('href', eUrl);
	link.innerText = vars.id;
	link.addEventListener('click', (e) => {
		e.preventDefault();
		const range = document.createRange();
		range.selectNode(link);
		window.getSelection().removeAllRanges();
		window.getSelection().addRange(range);
	});
	id.appendChild(link);

	const opener = document.createElement('a')
	opener.classList.add('ensign__opener')
	opener.setAttribute('href', eUrl)



	description.classList.add('ensign__description');
	if (vars.description.provisional) {
		description.classList.add('ensign__description--provisional');

		let descriptionEditFormAppended = false;
		description.addEventListener('click', async () => {
			if (!descriptionEditFormAppended) {
				description.setAttribute('hidden', true);
				let descriptionEditForm = await ensignEditDescription(vars, description);
				header.appendChild(descriptionEditForm);
				descriptionEditFormAppended = true;
			}
		});
	}
	if (vars?.description?.text) {
		if (typeof vars.description.text === 'string') {
			description.innerText = vars.description.text;
		} else if (typeof vars.description.text === 'object') {
			description.appendChild(vars.description.text);
		}
	}

	header.appendChild(title);
	header.appendChild(space);
	header.appendChild(id);
	header.appendChild(opener);
	header.appendChild(description);

	return header;
}

async function ensignEditDescription(vars, description) {
	let descriptionEditForm = document.createElement('form');
	descriptionEditForm.setAttribute('method', 'post');
	descriptionEditForm.setAttribute('action', 'https://www.wikidata.org/w/api.php');
	descriptionEditForm.classList.add('ensign__description-form');

	let token = await getTokens();

	let inputs = {
		'action': {
			value: 'wbsetdescription',
			type: 'hidden',
		},
		'format': {
			value: 'json',
			type: 'hidden',
		},
		'id': {
			value: vars.id,
			type: 'hidden',
		},
		'language': {
			value: lang,
			type: 'hidden',
		},
		'baserevid': {
			value: vars.revid,
			type: 'hidden',
		},
		'bot': {
			value: false,
			type: 'hidden',
		},
		'token': {
			value: token,
			type: 'hidden',
		},
		'errorformat': {
			value: 'plaintext',
			type: 'hidden',
		},
		'uselang': {
			value: lang,
			type: 'hidden',
		},
		'summary': {
			value: 'Added with Wikidata for Firefox. Possibly generated by tools.wmflabs.org/autodesc',
			type: 'hidden',
		},
	};

	let button = document.createElement('button');
	button.innerText = 'Set description';

	let valInput =	document.createElement('input');
	valInput.setAttribute('name', 'value');
	valInput.setAttribute('type', 'text');
	valInput.setAttribute('value', vars.description.text);
	descriptionEditForm.appendChild(valInput);

	for (let [name, input] of Object.entries(inputs)) {
		let newInput =	document.createElement('input');
		newInput.setAttribute('name', name);
		newInput.setAttribute('type', input.type);
		newInput.setAttribute('value', input.value);
		descriptionEditForm.appendChild(newInput);
	}


	descriptionEditForm.appendChild(button);

	descriptionEditForm.addEventListener('submit', async function(e) {
		e.preventDefault();
		const formData = new FormData(descriptionEditForm);

		let response = await fetch(descriptionEditForm.getAttribute('action'), {
			method: 'post',
			body: formData,
		});

		let json = JSON.parse(await response.text());
		if (json.errors) {
			valInput.setCustomValidity(json.errors['0']['*']);
		}
		if (json.success && json.success === 1) {
			description.innerText = valInput.value;
			description.classList.remove('ensign__description--provisional');
			description.removeAttribute('hidden');
			descriptionEditForm.setAttribute('hidden', true);
		}
	});

	return descriptionEditForm;
}

export { ensign }
